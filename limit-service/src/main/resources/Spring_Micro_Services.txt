-------------------------------------------------
**************Spring MS************
-------------------------------------------------

//Rest Service Basi URI standards.
https://blog.mwaysolutions.com/2014/06/05/10-best-practices-for-better-restful-api/

GitHub URL:
https://github.com/in28minutes/spring-microservices

Spring Cloud Config Server, Netflix Eureka, Netflix Zuul, Zipkin
---------------------------------------------------------
Spring Cloud Config Server:
-Centralized place for all the configuration for different micro services at different level like Dev, QA, Prod and so on...

-Atleast use Boot 2.0.0M3[not snapshot]
-give the appropriate artifact id.
-add Devtools, Config Server dependencies while creating service.

----------------------------------------------------------------------------------
-Use below annotation to define the application as Spring-Cloud-Config-Server
@EnableConfigServer
@SpringBootApplication
public class SpringCloudConfigServerApplication {

	public static void main(String[] args) {
		SpringApplication.run(SpringCloudConfigServerApplication.class, args);
	}
}

-MMake below changes in applicaiton.properties file
spring.application.name=spring-cloud-config-server
server.port=8888

-Add belwo changes in bootstrap.properties file.
spring.cloud.config.server.bootstrap=true
spring.cloud.config.server.git.clone-on-start=true
#below change is to read files from git server direct using url 
#spring.cloud.config.server.git.uri=https://github.com/suhailmansoori87/Git_Micro_Service_Config_Repo.git
#below changes to read it from local git.
spring.cloud.config.server.git.uri=file://${user.home}/git/Git_Micro_Service_Config_Repo

-use [applicationName].[filename].propertyName in respective properties file
Ex:
Created currency-exchange-service.properties file:
currency-exchange-service.currency-exchange-model.conversionMultiple=89
----------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------
How to read data from Config server to client:
--Add below minimal dependencies to create a microservice that will read data from config-server.
-Devtools, Web, actuator, Config-client

@ConfigurationProperties("")
- Annotation useful to read data from application.properties/config server respective to profiles.

application.properties
//add below property at client side in application.properties to read the respective config file form config server like DEV/QA/PROD 
spring.profiles.active=dev

Ex: 
@Component
@ConfigurationProperties(prefix="limit-service")
public class LimitConfiguration {

	private int minimum;
	private int maximum;
	
	//Setters, Getters, Constructor
}

spring.application.name=limit-service
limit-service.minimum=99
limit-service.maximum=9999

Other way to read is:
@RefreshScope

Use full property name in place holder to read from config server.
@Component
@RefreshScope
public class LimitConfiguration {

	@Value("${limit-service.minimum}")
	private int minimum;
----------------------------------------------------------------------------------------

How to connect with Git Config Repository.
-Create Repository in Git and sync add the same in Eclipse.
-To Add the same folder in project[CloudConfigServer], Right click on project->buildpath->LinkSource[select the repository location].
-Add respective configuration properties files in the newly added folder in build path.[property file must to have the same name as project name, so it will be easy to distinguish between different projects.]
-To define the files at DEV/QA/UAT/STAGE/PROD use the [filename]-dev/qa/uat/stag/prod.
 Ex: limit-service-qa.properties
-Use below property in client application.properties file to read the respective profile data.
-spring.profiles.active=dev

----------------------------------------------------------------------------------------



 



