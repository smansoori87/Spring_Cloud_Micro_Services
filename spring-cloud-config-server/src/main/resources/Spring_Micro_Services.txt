-------------------------------------------------
**************Spring MS************
-------------------------------------------------

//Rest Service Basi URI standards.
https://blog.mwaysolutions.com/2014/06/05/10-best-practices-for-better-restful-api/

GitHub URL:
https://github.com/in28minutes/spring-microservices

Spring Cloud Config Server, Netflix Eureka, Netflix Zuul, Zipkin

----------------------------------------------------------------------------------------------------
-----------------------------Spring Cloud Config Server:--------------------------------------------

-Centralized place for all the configuration for different micro services at different level like Dev, QA, Prod and so on...

-Atleast use Boot 2.0.0M3[not snapshot]
-give the appropriate artifact id.
-add Devtools, Config Server dependencies while creating service.

----------------------------------------------------------------------------------------------------
--------------------------Spring-Cloud-Config-Server--------------------------------------------------------

-Use below annotation to define the application as Spring-Cloud-Config-Server
@EnableConfigServer
@SpringBootApplication
public class SpringCloudConfigServerApplication {

	public static void main(String[] args) {
		SpringApplication.run(SpringCloudConfigServerApplication.class, args);
	}
}

-MMake below changes in applicaiton.properties file
spring.application.name=spring-cloud-config-server
server.port=8888

-Add belwo changes in bootstrap.properties file.
spring.cloud.config.server.bootstrap=true
spring.cloud.config.server.git.clone-on-start=true
#below change is to read files from git server direct using url 
#spring.cloud.config.server.git.uri=https://github.com/suhailmansoori87/Git_Micro_Service_Config_Repo.git
#below changes to read it from local git.
spring.cloud.config.server.git.uri=file://${user.home}/git/Git_Micro_Service_Config_Repo

-use [applicationName].[filename].propertyName in respective properties file
Ex:
Created currency-exchange-service.properties file:
currency-exchange-service.currency-exchange-model.conversionMultiple=89

----------------------------------------------------------------------------------------
----------------------------------Config server to client-----------------------------------------------------

How to read data from Config server to client:
--Add below minimal dependencies to create a microservice that will read data from config-server.
-Devtools, Web, actuator, Config-client

@ConfigurationProperties("")
- Annotation useful to read data from application.properties/config server respective to profiles.

application.properties
//add below property at client side in application.properties to read the respective config file form config server like DEV/QA/PROD 
spring.profiles.active=dev

bootstrap.propertrties
>Its must to have the same name of application and files in config server.
[name in bootstrap.properties]spring.application.name=currency-exchange-rate-service
Files in git repo[config server]
//currency-exchange-rate-service-qa.properties
//currency-exchange-rate-service.properties

Ex: 
@Component
@ConfigurationProperties(prefix="limit-service")
public class LimitConfiguration {

	private int minimum;
	private int maximum;
	
	//Setters, Getters, Constructor
}

spring.application.name=limit-service
limit-service.minimum=99
limit-service.maximum=9999

Other way to read is:
@RefreshScope

Use full property name in place holder to read from config server.
@Component
@RefreshScope
public class LimitConfiguration {

	@Value("${limit-service.minimum}")
	private int minimum;
	
----------------------------------------------------------------------------------------------------	
--------------------------------------connect with Git Config Repository--------------------------------------------------

How to connect with Git Config Repository.
-Create Repository in Git and sync add the same in Eclipse.
-To Add the same folder in project[CloudConfigServer], Right click on project->buildpath->LinkSource[select the repository location].
-Add respective configuration properties files in the newly added folder in build path.[property file must to have the same name as project name, so it will be easy to distinguish between different projects.]
-To define the files at DEV/QA/UAT/STAGE/PROD use the [filename]-dev/qa/uat/stag/prod.
 Ex: limit-service-qa.properties
-Use below property in client application.properties file to read the respective profile data.
-spring.profiles.active=dev

----------------------------------------------------------------------------------------------------
-------------------------------------Spring JPA:---------------------------------------------------


[imp] https://dzone.com/articles/introduction-to-jpa-using-spring-boot-data-jpa
https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-introduction/

<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>

Internally it will take care of Hibernet-Core, Hikari CP, SpringJdbc, Spring Tx, Spring JPA and others.

>Spring JPA is part of Spring Data project and built on top of Spring Data Common. 
Where Spring Data Exposed 4 different interfaces to connect with underline JPA like Hibernet and all.

>Spring JPA-->Spring Data Common-->JPA Providers[Like Hibernet, Ibaties and all]-->JPA[Java Persistence API]-->DB

>Spriing Data Common exposed 4 different interfaces.
[PagingAndSortingRepository-->CRUD Repository-->Repository][QuerydslPredicateExecutor]

>Moreover Spring JPA simplify this hireachy and came up with only 2 interface.
[JPARespository, JpaSpecificationExecutor]

::::::::::::H2 Changes:::::::::::::::
>If using H2 as dB instance, once app up and running to check the DB use below properties changes in application.properties
	-spring.jpa.show-sql=true
	-spring.h2.console.enabled=true

Use below change in h2-console
Ex URL:http://localhost:8000/h2-console
Change JDBC URL to :>jdbc:h2:mem:testdb

>
@Entity:
To define a class as Entity[table in DB]
Note: if Class Name is in initial upper case, JPA will create table with _ saprate.
EX: If Class name is ExchangeRate[class name]-->exchange_rate[in DB]

>@Id
To Define the primary key column

>@Column:
If there is need to create the coulumn in DB with diff name.
@Column(name="currency_from")

>To start with JPA:
Create an interface extend jpaRepository<Entity, Id>
Ex:
public interface ExchangeRateRepository extends JpaRepository<ExchangeRate, Long>{
	ExchangeRate findByFromAndTo(String from, String to);
}

>findByFromAndTo:
findBy is an standard prefix from JPA where we can add the conditions based on column. as in above example finding ExchangeRate based on from and to column.

>


----------------------------------------------------------------------------------------------------
---------------------------------------RestTemplate:-------------------------------------------------

Use to make the Server to Rest call.

@RestController
public class CurrencyConversionController {

	@Autowired
	Environment env;

	@GetMapping("/currency-conversion/api/v1/from/{from}/to/{to}/quantity/{quantity}")
	public CurrencyConverterBean currencyConverter(@PathVariable String from, @PathVariable String to, @PathVariable BigDecimal quantity) {

		Map<String, String> uriVar = new HashMap<String, String>();
		uriVar.put("from", from);
		uriVar.put("to", to);
		
		ResponseEntity<CurrencyConverterBean> re = new RestTemplate().getForEntity("http://localhost:8000/exchange-rate/api/v1/from/{from}/to/{to}",
				CurrencyConverterBean.class, uriVar);
		CurrencyConverterBean ccb = re.getBody();
		System.out.println(">>>>>>>>>>>" + ccb);

		return new CurrencyConverterBean(ccb.getId(), from, to, ccb.getConversionMultiple(), quantity, ccb.getConversionMultiple().multiply(quantity),
				Integer.valueOf(env.getProperty("local.server.port")));
	}
}
----------------------------------------------------------------------------------------
------------------------------------Spring Feign:---------------------------------------------------

-Its helps and simplify the process to invoke the server to server rest communication.
-Also its provide the important component called Ribbon that is client side load balancer.

-Add below dependency in pom.xml

<dependency>
	<groupId>org.springframework.cloud</groupId>
	<artifactId>spring-cloud-starter-openfeign</artifactId>
</dependency>

> Use below annotation to mark your application to read the feign class paths.
@SpringBootApplication
@EnableFeignClients("com.cs.feign")
public class CurrencyConversionServiceApplication {

	public static void main(String[] args) {
		SpringApplication.run(CurrencyConversionServiceApplication.class, args);
	}
}

>To read other microservice data use below annotations.
@FeignClient(name = "currency-exchange-rate-service", url = "localhost:8000")
public interface ExchangeRateControllerProxy {

	@GetMapping("/exchange-rate/api/v1/from/{from}/to/{to}")
	public CurrencyConverterBean currencyExchange(@PathVariable String from, @PathVariable String to);
}

>How to use the same.
@GetMapping("/currency-conversion-feign/api/v1/from/{from}/to/{to}/quantity/{quantity}")
public CurrencyConverterBean currencyConverterFeign(@PathVariable String from, @PathVariable String to, @PathVariable BigDecimal quantity) {

	CurrencyConverterBean ccb =ercp.currencyExchange(from, to);
	
	return new CurrencyConverterBean(ccb.getId(), from, to, ccb.getConversionMultiple(), quantity, ccb.getConversionMultiple().multiply(quantity),
			Integer.valueOf(env.getProperty("local.server.port")));
}

----------------------------------------------------------------------------------------
--------------------------------------Spring Ribbon:--------------------------------------------------


As Feign made developer life easier by providing the proxy interface for MS to MS communication, Still there is issue as it cant hadle multiple
instances of same microservice. and the same will become the bottleneck for scalability.
To Overcome the same problem Ribbon have client side load balancing concept and there we can configure multiple instances
of same microservice in property file.

Dependency needs to be added in pom.xml

<dependency>
	<groupId>org.springframework.cloud</groupId>
	<artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
</dependency>

Create Proxy class as below:
----------------
@FeignClient(name = "currency-exchange-rate-service")
@RibbonClient(name="currency-exchange-rate-service")
public interface ExchangeRateControllerProxy {

	@GetMapping("/exchange-rate/api/v1/from/{from}/to/{to}")
	public CurrencyConverterBean curr
	encyExchange(@PathVariable("from") String from, @PathVariable("to") String to);
}

Make the below changes in bootstrap.properties file
-----------------
currency-exchange-rate-service.ribbon.listOfServers=localhost:8000,localhost:8001
[service-name].ribbon.listOfServers=[list of servers]

----------------------------------------------------------------------------------------
---------------------------------Eureka Naming Server:-------------------------------------------------------


As Ribbon providing client side load balancing but still you would not have control to add or remove the instances of services 
flexibly or without touching the code base. 
Eureka provide flexiblity to hande this situation. Any MS can register it self with Eureka and the other MS can look into naming server to get the
instance of MS using Eureka client.

Add Below dependency into pom.xml
*******************
<dependency>
	<groupId>org.springframework.cloud</groupId>
	<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
</dependency>

Add below annotation to enable Eureka server n your main class.
*******************
@SpringBootApplication
@EnableEurekaServer
public class NetflixEurekaNamingServerApplication {

	public static void main(String[] args) {
		SpringApplication.run(NetflixEurekaNamingServerApplication.class, args);
	}
}

Add below configuration into properties file to test the server first time.
*******************
spring.application.name=netfix-eureka-naming-server
server.port=8761

eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false

Add Below dependency into client to register itself with eureka.
*******************
<dependency>
	<groupId>org.springframework.cloud</groupId>
	<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
</dependency>

Add below configuraiton in application.property file.
*******************
eureka.client.service-url.default-zone=http://localhost:8761/eureka

To talk to other services just use Ribbon and Feign with service name and it will work like pro... :)
Also comment the "currency-exchange-rate-service.ribbon.listOfServers" if there is any in applicaiton.properties.

---------------------------------------------------------------------------------------------------------------------
----------------------Config Server with Name Server------------------------------------------------------------------

How to link Config Server with Name Server and connect with client.
*******************
>To do the same enable config server with EurekaClient dependencies as mentioend in above steps.
>To read data from config server add below property in application/bootstrap.properties.

spring.cloud.config.discovery.enabled=true


